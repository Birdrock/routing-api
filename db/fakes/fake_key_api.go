// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
	"github.com/coreos/etcd/client"
)

type FakeKeyAPI struct {
	GetStub        func(ctx context.Context, key string, opts *client.GetOptions) (*client.Response, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		ctx  context.Context
		key  string
		opts *client.GetOptions
	}
	getReturns struct {
		result1 *client.Response
		result2 error
	}
	SetStub        func(ctx context.Context, key, value string, opts *client.SetOptions) (*client.Response, error)
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		ctx   context.Context
		key   string
		value string
		opts  *client.SetOptions
	}
	setReturns struct {
		result1 *client.Response
		result2 error
	}
	DeleteStub        func(ctx context.Context, key string, opts *client.DeleteOptions) (*client.Response, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		ctx  context.Context
		key  string
		opts *client.DeleteOptions
	}
	deleteReturns struct {
		result1 *client.Response
		result2 error
	}
	CreateStub        func(ctx context.Context, key, value string) (*client.Response, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		ctx   context.Context
		key   string
		value string
	}
	createReturns struct {
		result1 *client.Response
		result2 error
	}
	CreateInOrderStub        func(ctx context.Context, dir, value string, opts *client.CreateInOrderOptions) (*client.Response, error)
	createInOrderMutex       sync.RWMutex
	createInOrderArgsForCall []struct {
		ctx   context.Context
		dir   string
		value string
		opts  *client.CreateInOrderOptions
	}
	createInOrderReturns struct {
		result1 *client.Response
		result2 error
	}
	UpdateStub        func(ctx context.Context, key, value string) (*client.Response, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		ctx   context.Context
		key   string
		value string
	}
	updateReturns struct {
		result1 *client.Response
		result2 error
	}
	WatcherStub        func(key string, opts *client.WatcherOptions) client.Watcher
	watcherMutex       sync.RWMutex
	watcherArgsForCall []struct {
		key  string
		opts *client.WatcherOptions
	}
	watcherReturns struct {
		result1 client.Watcher
	}
}

func (fake *FakeKeyAPI) Get(ctx context.Context, key string, opts *client.GetOptions) (*client.Response, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		ctx  context.Context
		key  string
		opts *client.GetOptions
	}{ctx, key, opts})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(ctx, key, opts)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *FakeKeyAPI) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeKeyAPI) GetArgsForCall(i int) (context.Context, string, *client.GetOptions) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].ctx, fake.getArgsForCall[i].key, fake.getArgsForCall[i].opts
}

func (fake *FakeKeyAPI) GetReturns(result1 *client.Response, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *client.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyAPI) Set(ctx context.Context, key string, value string, opts *client.SetOptions) (*client.Response, error) {
	fake.setMutex.Lock()
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		ctx   context.Context
		key   string
		value string
		opts  *client.SetOptions
	}{ctx, key, value, opts})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		return fake.SetStub(ctx, key, value, opts)
	} else {
		return fake.setReturns.result1, fake.setReturns.result2
	}
}

func (fake *FakeKeyAPI) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeKeyAPI) SetArgsForCall(i int) (context.Context, string, string, *client.SetOptions) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return fake.setArgsForCall[i].ctx, fake.setArgsForCall[i].key, fake.setArgsForCall[i].value, fake.setArgsForCall[i].opts
}

func (fake *FakeKeyAPI) SetReturns(result1 *client.Response, result2 error) {
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 *client.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyAPI) Delete(ctx context.Context, key string, opts *client.DeleteOptions) (*client.Response, error) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		ctx  context.Context
		key  string
		opts *client.DeleteOptions
	}{ctx, key, opts})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(ctx, key, opts)
	} else {
		return fake.deleteReturns.result1, fake.deleteReturns.result2
	}
}

func (fake *FakeKeyAPI) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeKeyAPI) DeleteArgsForCall(i int) (context.Context, string, *client.DeleteOptions) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].ctx, fake.deleteArgsForCall[i].key, fake.deleteArgsForCall[i].opts
}

func (fake *FakeKeyAPI) DeleteReturns(result1 *client.Response, result2 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 *client.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyAPI) Create(ctx context.Context, key string, value string) (*client.Response, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		ctx   context.Context
		key   string
		value string
	}{ctx, key, value})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(ctx, key, value)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeKeyAPI) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeKeyAPI) CreateArgsForCall(i int) (context.Context, string, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].ctx, fake.createArgsForCall[i].key, fake.createArgsForCall[i].value
}

func (fake *FakeKeyAPI) CreateReturns(result1 *client.Response, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *client.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyAPI) CreateInOrder(ctx context.Context, dir string, value string, opts *client.CreateInOrderOptions) (*client.Response, error) {
	fake.createInOrderMutex.Lock()
	fake.createInOrderArgsForCall = append(fake.createInOrderArgsForCall, struct {
		ctx   context.Context
		dir   string
		value string
		opts  *client.CreateInOrderOptions
	}{ctx, dir, value, opts})
	fake.createInOrderMutex.Unlock()
	if fake.CreateInOrderStub != nil {
		return fake.CreateInOrderStub(ctx, dir, value, opts)
	} else {
		return fake.createInOrderReturns.result1, fake.createInOrderReturns.result2
	}
}

func (fake *FakeKeyAPI) CreateInOrderCallCount() int {
	fake.createInOrderMutex.RLock()
	defer fake.createInOrderMutex.RUnlock()
	return len(fake.createInOrderArgsForCall)
}

func (fake *FakeKeyAPI) CreateInOrderArgsForCall(i int) (context.Context, string, string, *client.CreateInOrderOptions) {
	fake.createInOrderMutex.RLock()
	defer fake.createInOrderMutex.RUnlock()
	return fake.createInOrderArgsForCall[i].ctx, fake.createInOrderArgsForCall[i].dir, fake.createInOrderArgsForCall[i].value, fake.createInOrderArgsForCall[i].opts
}

func (fake *FakeKeyAPI) CreateInOrderReturns(result1 *client.Response, result2 error) {
	fake.CreateInOrderStub = nil
	fake.createInOrderReturns = struct {
		result1 *client.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyAPI) Update(ctx context.Context, key string, value string) (*client.Response, error) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		ctx   context.Context
		key   string
		value string
	}{ctx, key, value})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(ctx, key, value)
	} else {
		return fake.updateReturns.result1, fake.updateReturns.result2
	}
}

func (fake *FakeKeyAPI) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeKeyAPI) UpdateArgsForCall(i int) (context.Context, string, string) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].ctx, fake.updateArgsForCall[i].key, fake.updateArgsForCall[i].value
}

func (fake *FakeKeyAPI) UpdateReturns(result1 *client.Response, result2 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *client.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyAPI) Watcher(key string, opts *client.WatcherOptions) client.Watcher {
	fake.watcherMutex.Lock()
	fake.watcherArgsForCall = append(fake.watcherArgsForCall, struct {
		key  string
		opts *client.WatcherOptions
	}{key, opts})
	fake.watcherMutex.Unlock()
	if fake.WatcherStub != nil {
		return fake.WatcherStub(key, opts)
	} else {
		return fake.watcherReturns.result1
	}
}

func (fake *FakeKeyAPI) WatcherCallCount() int {
	fake.watcherMutex.RLock()
	defer fake.watcherMutex.RUnlock()
	return len(fake.watcherArgsForCall)
}

func (fake *FakeKeyAPI) WatcherArgsForCall(i int) (string, *client.WatcherOptions) {
	fake.watcherMutex.RLock()
	defer fake.watcherMutex.RUnlock()
	return fake.watcherArgsForCall[i].key, fake.watcherArgsForCall[i].opts
}

func (fake *FakeKeyAPI) WatcherReturns(result1 client.Watcher) {
	fake.WatcherStub = nil
	fake.watcherReturns = struct {
		result1 client.Watcher
	}{result1}
}

var _ client.KeysAPI = new(FakeKeyAPI)
