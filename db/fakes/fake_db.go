// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf-experimental/routing-api/db"
)

type FakeDB struct {
	SaveRouteStub        func(route db.Route) error
	saveRouteMutex       sync.RWMutex
	saveRouteArgsForCall []struct {
		route db.Route
	}
	saveRouteReturns struct {
		result1 error
	}
	DeleteRouteStub        func(route db.Route) error
	deleteRouteMutex       sync.RWMutex
	deleteRouteArgsForCall []struct {
		route db.Route
	}
	deleteRouteReturns struct {
		result1 error
	}
}

func (fake *FakeDB) SaveRoute(route db.Route) error {
	fake.saveRouteMutex.Lock()
	fake.saveRouteArgsForCall = append(fake.saveRouteArgsForCall, struct {
		route db.Route
	}{route})
	fake.saveRouteMutex.Unlock()
	if fake.SaveRouteStub != nil {
		return fake.SaveRouteStub(route)
	} else {
		return fake.saveRouteReturns.result1
	}
}

func (fake *FakeDB) SaveRouteCallCount() int {
	fake.saveRouteMutex.RLock()
	defer fake.saveRouteMutex.RUnlock()
	return len(fake.saveRouteArgsForCall)
}

func (fake *FakeDB) SaveRouteArgsForCall(i int) db.Route {
	fake.saveRouteMutex.RLock()
	defer fake.saveRouteMutex.RUnlock()
	return fake.saveRouteArgsForCall[i].route
}

func (fake *FakeDB) SaveRouteReturns(result1 error) {
	fake.SaveRouteStub = nil
	fake.saveRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) DeleteRoute(route db.Route) error {
	fake.deleteRouteMutex.Lock()
	fake.deleteRouteArgsForCall = append(fake.deleteRouteArgsForCall, struct {
		route db.Route
	}{route})
	fake.deleteRouteMutex.Unlock()
	if fake.DeleteRouteStub != nil {
		return fake.DeleteRouteStub(route)
	} else {
		return fake.deleteRouteReturns.result1
	}
}

func (fake *FakeDB) DeleteRouteCallCount() int {
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	return len(fake.deleteRouteArgsForCall)
}

func (fake *FakeDB) DeleteRouteArgsForCall(i int) db.Route {
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	return fake.deleteRouteArgsForCall[i].route
}

func (fake *FakeDB) DeleteRouteReturns(result1 error) {
	fake.DeleteRouteStub = nil
	fake.deleteRouteReturns = struct {
		result1 error
	}{result1}
}

var _ db.DB = new(FakeDB)
